/**
 * app.c
 * GEMV Host Application Source File
 *
 */

#include <assert.h>
#include <dpu.h>
#include <dpu_log.h>
#include <getopt.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#if ENERGY
#include <dpu_probe.h>
#endif

#include "../support/common.h"
#include "../support/params.h"
#include "../support/timer.h"

#ifndef DPU_BINARY
#define DPU_BINARY "./bin/gemv_dpu"
#endif

static T* A;
static T* B;
static T* C;
static T* C_dpu;

static void init_data(T* A, T* B, unsigned int m_size, unsigned int n_size) {
  /*
  srand(0);

  for (unsigned int i = 0; i < m_size * n_size; i++)
  {
        A[i] = (unsigned int) (rand()%50);
  }

  for (unsigned int i = 0; i < n_size; i++)
  {
        B[i] = (unsigned int) (rand()%50);
  }
  */
  char* mfname = "../../../data/int32_8192_8192.bin";
  char* vfname = "../../../data/int32_8192.bin";
  if (m_size == 163840 || n_size >= 4096) {
    mfname = "../../../data/int32_163840_4096.bin";
    vfname = "../../../data/int32_163840_4096.bin";
  }

  FILE* file = fopen(mfname, "rb");
  if (file == NULL) {
        exit(1);
  }
  fread(A, sizeof(T), m_size * n_size, file);
  fclose(file);
  file = fopen(vfname, "rb");
  if (file == NULL) {
        exit(1);
  }
  fread(B, sizeof(T), n_size, file);
}

static void gemv_host(T* C, T* A, T* B, unsigned int m_size, unsigned int n_size) {
  for (unsigned int i = 0; i < m_size; i++) {
    C[i] = 0;
  }

  for (unsigned int m = 0; m < m_size; m++) {
    for (unsigned int n = 0; n < n_size; n++) {
      C[m] += A[m * n_size + n] * B[n];
    }
  }
}

int main(int argc, char** argv) {
  struct Params p = input_params(argc, argv);

  struct dpu_set_t dpu_set, dpu;
  uint32_t nr_of_dpus;


  unsigned int i;
  unsigned int m_size = p.m_size; // 413
  unsigned int n_size = p.n_size; // 413

  dpu_info = (struct dpu_info_t*)malloc(nr_of_dpus * sizeof(struct dpu_info_t));
  dpu_arguments_t* input_args = (dpu_arguments_t*)malloc(nr_of_dpus * sizeof(dpu_arguments_t));



  uint32_t max_rows = 0;

  uint32_t n_size_pad = roundup(n_size, 2);

  dpu_alloc(DPUs, NULL, &dpu_set);
  dpu_load(dpu_set, binary, NULL);

  DPU_FOREACH(dpu_set, dpu, i) {
    uint32_t chunks = M / DPUs, rest_rows = M % DPUs;
    prev_rows[i] = i * chunks + min(i, rest_rows);
    rows[i] = chunks + (i < rest_rows ? 1 : 0);
    rows_aligned[i] = ((rows[i] + 1) / 2) * 2;
    max_rows = max(max_rows, rows_aligned);
  }

  // Transfer Arguments to DPUs { prev_rows, rows, rows_aligned, max_rows }
  uint32_t transfer_bytes = ((N + 1) / 2) * 2 * sizeof(T);
  DPU_FOREACH(dpu_set, dpu, i) dpu_prepare_xfer(dpu, A + prev_rows[i] * n_size);
  dpu_push_xfer(dpu_set, DPU_XFER_TO_DPU, "A", 0, max_rows * transfer_bytes, DPU_XFER_DEFAULT);
  DPU_FOREACH(dpu_set, dpu, i) dpu_prepare_xfer(dpu, B);
  dpu_push_xfer(dpu_set, DPU_XFER_TO_DPU, "B", 0, transfer_bytes, DPU_XFER_DEFAULT);

  dpu_launch(dpu_set, DPU_SYNCHRONOUS);

  DPU_FOREACH(dpu_set, dpu, i) dpu_prepare_xfer(dpu, C_dpu + i * max_rows);
  dpu_push_xfer(dpu_set, DPU_XFER_FROM_DPU, "C", 0, transfer_bytes, DPU_XFER_DEFAULT);

  dpu_free(dpu_set);




  bool status = true;
  unsigned int n, j;
  i = 0;
  for (n = 0; n < nr_of_dpus; n++) {
    for (j = 0; j < dpu_info[n].rows_per_dpu; j++) {
      if (C[i] != C_dpu[n * max_rows + j]) {
        status = false;

      }
      i++;
    }
  }
  if (status) {
      } else {
      }

  free(A);
  free(B);
  free(C);
  free(C_dpu);
  dpu_free(dpu_set);

  return status ? 0 : -1;
}